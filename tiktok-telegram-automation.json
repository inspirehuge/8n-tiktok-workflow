{
  "name": "TikTok to Telegram Automation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 9 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Daily Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/clockworks~free-tiktok-scraper/run-sync-get-dataset-items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.apifyApi.token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "searchQueries",
              "value": "[\"trending products\", \"viral products\", \"amazon finds\", \"tiktok made me buy it\"]"
            },
            {
              "name": "resultsPerQuery",
              "value": "10"
            },
            {
              "name": "shouldDownloadCovers",
              "value": "true"
            },
            {
              "name": "shouldDownloadSlideshowImages",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "fetch-tiktok-data",
      "name": "Fetch TikTok Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "apify-credentials",
          "name": "Apify API"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "processed_videos",
              "value": "={{ $json.processed_videos || '[]' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "load-cache",
      "name": "Load Cache",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "id": "split-batches",
      "name": "Split Into Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ JSON.parse($('Load Cache').item.json.processed_videos).includes($json.id) }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-duplicates",
      "name": "Filter Duplicates",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "video_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "username",
              "value": "={{ $json.authorMeta?.name || $json.author?.uniqueId || 'Unknown' }}"
            },
            {
              "name": "description",
              "value": "={{ $json.text || $json.desc || 'No description available' }}"
            },
            {
              "name": "video_url",
              "value": "={{ $json.webVideoUrl || $json.videoUrl || ('https://www.tiktok.com/@' + ($json.authorMeta?.name || $json.author?.uniqueId) + '/video/' + $json.id) }}"
            },
            {
              "name": "thumbnail_url",
              "value": "={{ $json.covers?.[0] || $json.videoMeta?.coverUrl || $json.cover || '' }}"
            },
            {
              "name": "play_count",
              "value": "={{ $json.playCount || $json.stats?.playCount || 0 }}"
            },
            {
              "name": "like_count",
              "value": "={{ $json.diggCount || $json.stats?.diggCount || 0 }}"
            },
            {
              "name": "share_count",
              "value": "={{ $json.shareCount || $json.stats?.shareCount || 0 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "format-data",
      "name": "Format Video Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "telegram_message",
              "value": "🔥 *Trending TikTok Product*\n\n👤 **@{{ $json.username }}**\n\n📝 {{ $json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description }}\n\n📊 **Stats:**\n▶️ {{ $json.play_count.toLocaleString() }} views\n❤️ {{ $json.like_count.toLocaleString() }} likes\n🔄 {{ $json.share_count.toLocaleString() }} shares\n\n🔗 [Watch on TikTok]({{ $json.video_url }})"
            },
            {
              "name": "chat_id",
              "value": "={{ $vars.telegram_chat_id }}"
            },
            {
              "name": "bot_token",
              "value": "={{ $vars.telegram_bot_token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "format-telegram-message",
      "name": "Format Telegram Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/bot{{ $json.bot_token }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"text\": {{ JSON.stringify($json.telegram_message) }},\n  \"parse_mode\": \"Markdown\",\n  \"disable_web_page_preview\": false,\n  \"reply_markup\": {\n    \"inline_keyboard\": [[\n      {\n        \"text\": \"🎬 Watch Video\",\n        \"url\": \"{{ $('Format Video Data').item.json.video_url }}\"\n      }\n    ]]\n  }\n}",
        "options": {}
      },
      "id": "send-to-telegram",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $('Format Video Data').item.json.thumbnail_url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-thumbnail",
      "name": "Check Thumbnail",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/bot{{ $('Format Telegram Message').item.json.bot_token }}/sendPhoto",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{ $('Format Telegram Message').item.json.chat_id }}\",\n  \"photo\": \"{{ $('Format Video Data').item.json.thumbnail_url }}\",\n  \"caption\": \"🖼️ Video Thumbnail\",\n  \"reply_to_message_id\": {{ $('Send to Telegram').item.json.result.message_id }}\n}",
        "options": {}
      },
      "id": "send-thumbnail",
      "name": "Send Thumbnail",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2220,
        200
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "processed_videos",
              "value": "={{ JSON.stringify([...JSON.parse($('Load Cache').item.json.processed_videos), $('Format Video Data').item.json.video_id]) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update-cache",
      "name": "Update Cache",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        2220,
        400
      ]
    },
    {
      "parameters": {
        "mode": "passThrough",
        "output": "input2"
      },
      "id": "merge-results",
      "name": "Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2440,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Wait 2 seconds between messages to avoid rate limiting\nreturn new Promise(resolve => {\n  setTimeout(() => {\n    resolve([{ json: { status: 'completed', video_id: $input.item.json.video_id } }]);\n  }, 2000);\n});"
      },
      "id": "rate-limit-delay",
      "name": "Rate Limit Delay",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2660,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Daily Trigger": {
      "main": [
        [
          {
            "node": "Fetch TikTok Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch TikTok Data": {
      "main": [
        [
          {
            "node": "Load Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Cache": {
      "main": [
        [
          {
            "node": "Split Into Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Batches": {
      "main": [
        [
          {
            "node": "Filter Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Duplicates": {
      "main": [
        [
          {
            "node": "Format Video Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Video Data": {
      "main": [
        [
          {
            "node": "Format Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Telegram Message": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Telegram": {
      "main": [
        [
          {
            "node": "Check Thumbnail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Thumbnail": {
      "main": [
        [
          {
            "node": "Send Thumbnail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Thumbnail": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Cache": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Rate Limit Delay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "tiktok-telegram-automation"
  },
  "id": "tiktok-telegram-workflow",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "automation",
      "name": "automation"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z", 
      "id": "tiktok",
      "name": "tiktok"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "telegram",
      "name": "telegram"
    }
  ]
}